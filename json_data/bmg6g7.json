{
    "op": {
        "upvote_ratio": null,
        "selftext": "I've designed a classifier which classifies malware PEs from benign PEs. I have taken data from DOS\\_HEADER, OPTIONAL\\_HEADER and FILE\\_Header as my features hoping that these values do not change even after packing.  \n\nAre these features enough to classify even the packed files? \n\nWhen I tested the classifier with 1100 benign files packed with different packers, i got only 40% accuracy, i.e, only 40% of them are correctly identified as benign and it said rest all are malware. \n\nAre there really any features which stay same even after packing a PE so that we can use them to build the ML Classifier and overcome the problem of packed malware?\n\nI've been looking into this for quite sometime but unable to conclude on anything yet. Any help in this regard will be of great use. Thanks.",
        "title": "Packing resistant features for Static Malware Analysis using machine learning",
        "score": 14,
        "id": "bmg6g7",
        "commsNum": 5,
        "timeStamp": "2019/05/08-23:18:23",
        "author_name": "mitml",
        "is_self": true,
        "locked": false,
        "num_comments": 5,
        "over_18": false,
        "spoiler": false,
        "subreddit": "malware",
        "stickied": false,
        "url": "https://www.reddit.com/r/Malware/comments/bmg6g7/packing_resistant_features_for_static_malware/"
    },
    "posts": {
        "emznk8h": {
            "comment": "Try training extracting features from low entropy sections maybe",
            "timeStamp": "2019/05/09-21:39:17",
            "id": "emznk8h",
            "is_submitter": false,
            "link_id": "t3_bmg6g7",
            "parent_id": "t1_emwmgwm",
            "score": 2,
            "stickied": false,
            "author_name": "bonobolol"
        },
        "emxwybp": {
            "comment": "Packing aside, you'll need more than the features in the header and more than \\~1k samples for a PE32 malware detection model, but it's a start. Some of my colleagues and I have been working on this. Check out these papers:\n\n* on using byte ngrams: [1](https://www.edwardraff.com/publications/investigation_byte_ngrams.pdf), [2](https://www.edwardraff.com/publications/what_can_ngrams_learn.pdf);\n* on building an ML model just on using the PE header: [link](https://arxiv.org/abs/1709.01471);\n* and on building a model by reading in the raw bytes of an entire EXE file: [link](https://arxiv.org/abs/1710.09435).\n* Other papers: [link](https://www.edwardraff.com/index.php/publications).",
            "timeStamp": "2019/05/09-11:21:47",
            "id": "emxwybp",
            "is_submitter": false,
            "link_id": "t3_bmg6g7",
            "parent_id": "t3_bmg6g7",
            "score": 4,
            "stickied": false,
            "author_name": "rjzak"
        },
        "emxnxrh": {
            "comment": "I'm not sure what your objective is. \n\nI wouldn't trust most data from a packed binary to not have been modified in the packing process since it's all just bytes anyway and none of that information is required to be accurate in order to pack the file. If I'm understanding you correctly it sounds like you're trying to come up with a similar function to [import hashing](https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html) but using a different set of metadata?",
            "timeStamp": "2019/05/09-09:58:59",
            "id": "emxnxrh",
            "is_submitter": false,
            "link_id": "t3_bmg6g7",
            "parent_id": "t3_bmg6g7",
            "score": 1,
            "stickied": false,
            "author_name": "specter800"
        },
        "emwmgwm": {
            "comment": "I think you already found the main issue: In general these approaches will only be able to identify packed vs. non-packed executables.",
            "timeStamp": "2019/05/09-02:58:29",
            "id": "emwmgwm",
            "is_submitter": false,
            "link_id": "t3_bmg6g7",
            "parent_id": "t3_bmg6g7",
            "score": 6,
            "stickied": false,
            "author_name": "mmorgens82"
        },
        "emwj7yb": {
            "comment": "There are other aspects that worth trying, based-on other researches:\n\n* OPCODE sequences\n   * [Opcode sequences as representation of executables for data-mining-based unknown malware detection](https://www.sciencedirect.com/science/article/pii/S0020025511004336)\n   * [Detecting unknown malicious code by applying classification techniques on OpCode patterns](https://link.springer.com/article/10.1186/2190-8532-1-1)\n   * [An effective approach for classification of advanced malware with high accuracy](https://arxiv.org/abs/1606.06897)\n* File size\n   * [Grouping the Executables to Detect Malwares with High Accuracy](https://www.sciencedirect.com/science/article/pii/S1877050916001174)\n\nThis research win Microsoft Malware Classification challenge in 2015: [xiaozhouwang](https://github.com/xiaozhouwang)/[kaggle\\_Microsoft\\_Malware](https://github.com/xiaozhouwang/kaggle_Microsoft_Malware)\n\nAbout features selection: [Novel Feature Extraction, Selection and Fusion for Effective Malware Family Classification](https://arxiv.org/pdf/1511.04317.pdf)",
            "timeStamp": "2019/05/09-01:56:37",
            "id": "emwj7yb",
            "is_submitter": false,
            "link_id": "t3_bmg6g7",
            "parent_id": "t3_bmg6g7",
            "score": 5,
            "stickied": false,
            "author_name": "pe3zx"
        }
    }
}