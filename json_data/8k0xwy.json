{
    "op": {
        "upvote_ratio": null,
        "selftext": "I found that someone was downloading some encoded malware to\na WordPress honey pot that I have. This is the story of\nhow I figured out the encoding.\n\n0. Tried to figure out encoding.\n\nI used Wikipedia to find simple ciphers\nunder the theory that malware authors aren't very sophisticated.\nI tried Caesar cipher, Vigenere cipher, affine cipher.\nVigenere cipher with byte value transpositions seemed to provide the best match\nto hamming distance and IoC vs key length.\n\nI decided that the encoded files probably had an 8-byte or 8-position key.\n\n1. Posted to [/r/Malware](https://www.reddit.com/r/Malware/comments/8hiaz6/encoded_malware_what_encoding/)\nI read and consider the replies.\nI tried some things, input differential xor and CyberChef,\nbased on the replies.\n\nNone of them seem promising, as the hamming distance or IoC of encoded PHP\ndidn't seem to match what I saw in the downloaded files.\n\n2. Remembered a cache of WSO instances I had not reviewed.\nFound this decrypting PHP code in WSO 4.1.1, 4.2.5 (https://github.com/wso-shell/WSO)\n\n    function decrypt($str, $pwd)\n    {\n        $pwd = base64_encode($pwd);\n        $str = base64_decode($str);\n        $enc_chr = '';\n        $enc_str = '';\n        $i = 0;\n        while ($i &lt; strlen($str)) {\n            for ($j = 0; $j &lt; strlen($pwd); $j++) {\n                $enc_chr = chr(ord($str[$i]) ^ ord($pwd[$j]));\n                $enc_str .= $enc_chr;\n                $i++;\n                if ($i &gt;= strlen($str)) {\n                    break;\n                }\n            }\n        }\n        return base64_decode($enc_str);\n    }\n\n\n3. WSO 4.x function `decrypt()` uses `base64_encode(md5($_REQUEST['HTTP_USER_AGENT']))`\nas an xor-key.\n\n\t- `base64_decode()` after xor-ing with key\n\t- Does not work on the data I have. The \"a\" POST parameter doesn't decode to anything.\n\nSeems like a weird choice: always ends up with a 44-byte key,\nonly 16 different byte values in the `md5()` output,\nonly 64 byte values in `base64_encode()` output.\n\n4. The \"a\" POST parameter decodes to 4 bytes. That implies a 3-character\nresult after xor-with-key and `base64_decode()`.\n\n\t- `function actionPhp()`\n\t- `function actionSql()`\n\nThose are the only 3-letter \"actions\" in most/all WSO variants invokeable with 3-character \"a\" value.\nWSO 4.1.1 and 4.2.5 keep the WSO structure of calling a function based on value of \"a\" POST parameter.\n\n5. `base64_encode(\"Php\")` - 4 characters.\n\n    - Ifound a 4-byte xor-key that got me those 4 characters with base64-decoded \"a\" value\n    - I used that 4-byte xor-key on base64 decoded \"p1\" strings\n\t- one of them has `$u0` as first 3 characters, one of them `fun`\n\n6. Assuming that \"fun\" means the next 5 characters are \"ction\"\ncalculate 4 more xor-key bytes\n\n7. CyberChef recipe (https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true)XOR(%7B'option':'Latin1','string':''%7D,'Standard',false)From_Base64('A-Za-z0-9%2B/%3D',true))\ndecrypts the entire 4 or 5 lines of \"p1\" value\nwith an 8-character xor-key: \"bWtmaWxl\"\n\nThat 8-character xor-key works on all of the encoded downloads I have.\n\nI found several instances of \"mumblehard\" code,\nand a few other things I need to look at in more detail.\n",
        "title": "Encoded Malware - figured out the encoding method",
        "score": 1,
        "id": "8k0xwy",
        "commsNum": 0,
        "timeStamp": "2018/05/16-20:09:41",
        "author_name": "bediger4000",
        "is_self": true,
        "locked": false,
        "num_comments": 0,
        "over_18": false,
        "spoiler": false,
        "subreddit": "malware",
        "stickied": false,
        "url": "https://www.reddit.com/r/Malware/comments/8k0xwy/encoded_malware_figured_out_the_encoding_method/"
    },
    "posts": {}
}